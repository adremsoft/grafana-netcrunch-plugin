{"version":3,"sources":["../../../../../src/datasource/services/netCrunchAPI/adrem/adremWebWorker.js"],"names":["AdremWebWorker","workerUrl","getTaskId","taskId","Date","getTime","tasks","has","Map","webWorker","Worker","onmessage","event","data","resolve","get","delete","result","executeTask","taskData","Promise","set","postMessage","taskSpec","name","args","task","funcName","async","self","reject","then","type","error","getCodeBlob","getAdremTaskDispatcher","postResult","globalScope","executeSyncFunc","apply","executeAsyncFunc","catch","eventData","bundledCode","toString","workerCode","reduce","prev","curr","Blob","getBlobURL","URL","createObjectURL","taskInterfaces","addFunctionCode","code","createInterface","push","getWebWorker","forEach","addTask"],"mappings":"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","file":"adremWebWorker.js","sourcesContent":["/**\n * @license\n * Copyright AdRem Software. All Rights Reserved.\n *\n * Use of this source code is governed by an Apache License, Version 2.0 that can be\n * found in the LICENSE file.\n */\n\n/* global Worker, Blob, URL */\n\nclass AdremWebWorker {\n\n  constructor(workerUrl) {\n    const\n      tasks = new Map(),\n      webWorker = new Worker(workerUrl);\n\n    function getTaskId() {\n      let taskId = (new Date()).getTime();\n      while (tasks.has(taskId)) {\n        taskId += 1;\n      }\n      return taskId;\n    }\n\n    webWorker.onmessage = (event) => {\n      const taskId = event.data.taskId;\n      if (tasks.has(taskId)) {\n        const resolve = tasks.get(taskId);\n        tasks.delete(taskId);\n        resolve(event.data.result);\n      }\n    };\n\n    this.executeTask = (taskData) => {\n      const\n        taskId = getTaskId(),\n        data = taskData;\n      data.taskId = taskId;\n      return new Promise((resolve) => {\n        tasks.set(taskId, resolve);\n        webWorker.postMessage(data);\n      });\n    };\n\n  }\n\n  addTask(taskSpec) {\n    // eslint-disable-next-line\n    this[taskSpec.name] = function(...args) {\n      const task = {\n        funcName: taskSpec.name,\n        args,\n        async: taskSpec.async\n      };\n\n      if (taskSpec.async === true) {\n        const self = this;\n        return new Promise((resolve, reject) => {\n          self.executeTask(task)\n            .then((result) => {\n              if (result.type === 'resolve') {\n                resolve(result.result);\n              }\n              if (result.type === 'reject') {\n                reject(result.error);\n              }\n            });\n        });\n      }\n\n      return this.executeTask(task);\n    };\n  }\n\n  static webWorkerBuilder() {\n    const\n      workerCode = [],\n      taskInterfaces = [];\n\n    function getCodeBlob() {\n\n      function getAdremTaskDispatcher() {\n        const globalScope = this;\n\n        function postResult(taskId, result) {\n          globalScope.postMessage({\n            taskId,\n            result\n          });\n        }\n\n        function executeSyncFunc(taskId, funcName, args) {\n          // eslint-disable-next-line\n          postResult(taskId, globalScope[funcName].apply(globalScope, args));\n        }\n\n        function executeAsyncFunc(taskId, funcName, args) {\n          // eslint-disable-next-line\n          globalScope[funcName].apply(globalScope, args)\n            .then(result => postResult(taskId, {\n              type: 'resolve',\n              result\n            }))\n            .catch(error => postResult(taskId, {\n              type: 'reject',\n              error\n            }));\n        }\n\n        function taskDispatcher(event) {\n          const eventData = event.data;\n          if (eventData.async !== true) {\n            executeSyncFunc(eventData.taskId, eventData.funcName, eventData.args);\n          } else {\n            executeAsyncFunc(eventData.taskId, eventData.funcName, eventData.args);\n          }\n        }\n\n        return taskDispatcher;\n      }\n\n      function getTaskDispatchingSetup() {\n        return `this.onmessage = ${getAdremTaskDispatcher.name}().bind(this);\\n\\n`;\n      }\n\n      let bundledCode;\n      bundledCode = getTaskDispatchingSetup();\n      bundledCode += `${getAdremTaskDispatcher.toString()}\\n`;\n      bundledCode += workerCode.reduce((prev, curr) => `${prev}\\n${curr}`, '');\n      return new Blob([bundledCode], { type: 'application/javascript' });\n    }\n\n    function getBlobURL() {\n      return URL.createObjectURL(getCodeBlob());\n    }\n\n    function addFunctionCode(code, createInterface = false, async = false) {\n      if (typeof code === 'function') {\n        workerCode.push(code.toString());\n        if ((createInterface === true) && (code.name != null) && (code.name !== '')) {\n          taskInterfaces.push({\n            name: code.name,\n            async\n          });\n        }\n        return true;\n      }\n      return false;\n    }\n\n    function getWebWorker() {\n      const webWorker = new AdremWebWorker(getBlobURL());\n      taskInterfaces.forEach((taskSpec) => {\n        webWorker.addTask(taskSpec);\n      });\n      return webWorker;\n    }\n\n    return {\n      addFunctionCode,\n      getWebWorker\n    };\n  }\n\n}\n\nexport {\n  AdremWebWorker\n};\n"]}