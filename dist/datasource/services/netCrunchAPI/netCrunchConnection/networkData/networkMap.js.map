{"version":3,"sources":["../../../../../../src/datasource/services/netCrunchAPI/netCrunchConnection/networkData/networkMap.js"],"names":["PRIVATE_PROPERTIES","local","Symbol","values","NetCrunchNetworkMap","mapRec","addNodesToNetworkMap","HostMapData","i","len","nodeData","nodesId","push","parseInt","getValues","netId","NetIntId","parentId","NetworkData","isNaN","isFolder","MapClassTag","Array","isArray","mapsData","maps","map","id","children","networkMap","isUnique","every","child","displayName","result","some","childMap","toUpperCase","addArrayToSet","array","set","forEach","add","item","nodesSet","Set","allNodesId","from","DisplayName","sortMapsByName","first","second","localeCompare","createMapList","innerLevel","parentIndex","mapList","sort","currentIndex","length","concat"],"mappings":"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","file":"networkMap.js","sourcesContent":["/**\r\n * @license\r\n * Copyright AdRem Software. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an Apache License, Version 2.0 that can be\r\n * found in the LICENSE file.\r\n */\r\n\r\nconst\r\n  PRIVATE_PROPERTIES = {\r\n    local: Symbol('local'),\r\n    values: Symbol('values')\r\n  };\r\n\r\nclass NetCrunchNetworkMap {\r\n\r\n  constructor(mapRec) {\r\n\r\n    /* eslint-disable no-param-reassign */\r\n\r\n    function addNodesToNetworkMap(local, values) {\r\n      if (values.HostMapData != null) {\r\n        for (let i = 1, len = values.HostMapData[0]; i <= len; i += 1) {\r\n          const nodeData = values.HostMapData[i];\r\n          if ((nodeData[0] === 0) || (nodeData[0] === 5)) {\r\n            local.nodesId.push(parseInt(nodeData[1], 10));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    function decodeNetworkMapData(local, values) {\r\n\r\n      local.netId = values.NetIntId || '';\r\n\r\n      local.parentId = (values.NetworkData != null) ? parseInt(values.NetworkData[0], 10) : '';\r\n      if (isNaN(local.parentId)) {\r\n        local.parentId = '';\r\n      }\r\n\r\n      local.isFolder = ((values.MapClassTag === 'dynfolder') ||\r\n                        ((values.NetworkData != null) && Array.isArray(values.NetworkData[1])));\r\n\r\n      if (local.isFolder) {\r\n        const mapsData = (values.NetworkData != null) ? values.NetworkData[1] : [];\r\n\r\n        if (Array.isArray(mapsData)) {                        // otherwise it can be empty object instead of empty array\r\n          local.maps = mapsData.map(id => parseInt(id, 10));\r\n        }\r\n\r\n        if (values.MapClassTag === 'fnet') {                  // Add nodes into physical segments map\r\n          addNodesToNetworkMap(local, values);\r\n        }\r\n      } else {\r\n        addNodesToNetworkMap(local, values);\r\n      }\r\n    }\r\n\r\n    /* eslint-enable no-param-reassign */\r\n\r\n    if (mapRec != null) {\r\n      this[PRIVATE_PROPERTIES.local] = mapRec.local;\r\n      this[PRIVATE_PROPERTIES.values] = mapRec.getValues();\r\n    } else {\r\n      this[PRIVATE_PROPERTIES.local] = {};\r\n      this[PRIVATE_PROPERTIES.values] = {};\r\n    }\r\n\r\n    this[PRIVATE_PROPERTIES.local].nodesId = [];\r\n    decodeNetworkMapData(this[PRIVATE_PROPERTIES.local], this[PRIVATE_PROPERTIES.values]);\r\n    this[PRIVATE_PROPERTIES.local].children = [];\r\n  }\r\n\r\n  get netId() {\r\n    return this[PRIVATE_PROPERTIES.local].netId;\r\n  }\r\n\r\n  get parentId() {\r\n    return this[PRIVATE_PROPERTIES.local].parentId;\r\n  }\r\n\r\n  get nodesId() {\r\n    return this[PRIVATE_PROPERTIES.local].nodesId;\r\n  }\r\n\r\n  get allNodesId() {\r\n    const nodesSet = new Set();\r\n\r\n    function addArrayToSet(array, set) {\r\n      array.forEach(item => set.add(item));\r\n      return set;\r\n    }\r\n\r\n    if (this.isFolder) {\r\n\r\n      if (this[PRIVATE_PROPERTIES.values].MapClassTag === 'fnet') {     // Add nodes into physical segment map\r\n        addArrayToSet(this.nodesId, nodesSet);\r\n      }\r\n\r\n      this.children.forEach((child) => {\r\n        addArrayToSet(child.allNodesId, nodesSet);\r\n      });\r\n\r\n    } else {\r\n      addArrayToSet(this.nodesId, nodesSet);\r\n    }\r\n\r\n    return Array.from(nodesSet);\r\n  }\r\n\r\n  get isFolder() {\r\n    return this[PRIVATE_PROPERTIES.local].isFolder;\r\n  }\r\n\r\n  get children() {\r\n    return this[PRIVATE_PROPERTIES.local].children;\r\n  }\r\n\r\n  get displayName() {\r\n    return this[PRIVATE_PROPERTIES.values].DisplayName || '';\r\n  }\r\n\r\n  get allChildren() {\r\n\r\n    function sortMapsByName(first, second) {\r\n      return first.displayName.localeCompare(second.displayName);\r\n    }\r\n\r\n    function createMapList(map, innerLevel, parentIndex) {\r\n      let mapList = [];\r\n\r\n      map.children\r\n        .sort(sortMapsByName)\r\n        .forEach((child) => {\r\n          mapList.push({\r\n            map: child,\r\n            innerLevel,\r\n            parentIndex\r\n          });\r\n\r\n          if ((map.isFolder) && (innerLevel <= 2)) {\r\n            const currentIndex = isNaN(parentIndex) ? mapList.length - 1 : parentIndex + mapList.length;\r\n            mapList = mapList.concat(createMapList(child, innerLevel + 1, currentIndex));\r\n          }\r\n        });\r\n      return mapList;\r\n    }\r\n\r\n    return createMapList(this, 1, 'root');\r\n  }\r\n\r\n  addChild(networkMap) {\r\n    const isUnique = this.children.every(child => (child.netId !== networkMap.netId));\r\n    if (isUnique === true) {\r\n      this.children.push(networkMap);\r\n    }\r\n  }\r\n\r\n  getChildMapByDisplayName(displayName) {\r\n    let result = null;\r\n\r\n    this.children.some((childMap) => {\r\n      if (childMap.displayName.toUpperCase() === displayName.toUpperCase()) {\r\n        result = childMap;\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n}\r\n\r\nexport {\r\n  NetCrunchNetworkMap\r\n};\r\n"]}