{"version":3,"sources":["../../../../../../src/datasource/services/netCrunchAPI/netCrunchConnection/networkData/nodesOperations.js"],"names":["sortNodesByNameAndAddress","nodes","compareAddressIP","addressOne","addressTwo","addressOneItems","split","addressTwoItems","i","n","Math","max","length","getNodeProperty","node","propertyName","filter","id","name","address","sort","nodeA","nodeB","nodeAName","toLowerCase","nodeBName","nodeAAddress","nodeBAddress","result","localeCompare","getWebWorker","workerBuilder","AdremWebWorker","webWorkerBuilder","addFunctionCode","webWorkerSingleton","THREAD_WORKER_NODES_NUMBER","NetCrunchNodesOperations","Promise","resolve","nodesRemoteBuffer","forEach","index","push","then","sortedNodes","deviceTypePattern","checkDeviceType"],"mappings":"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","file":"nodesOperations.js","sourcesContent":["/**\n * @license\n * Copyright AdRem Software. All Rights Reserved.\n *\n * Use of this source code is governed by an Apache License, Version 2.0 that can be\n * found in the LICENSE file.\n */\n\nimport { AdremWebWorker } from '../../adrem/module';\n\nconst THREAD_WORKER_NODES_NUMBER = 1000;\n\nlet webWorkerSingleton = null;\n\nfunction sortNodesByNameAndAddress(nodes) {\n\n  function compareAddressIP(addressOne, addressTwo) {\n    const\n      addressOneItems = addressOne.split('.'),\n      addressTwoItems = addressTwo.split('.');\n\n    for (let i = 0, n = Math.max(addressOneItems.length, addressTwoItems.length); i < n; i += 1) {\n      if (addressOneItems[i] !== addressTwoItems[i]) {\n        return (addressOneItems[i] < addressTwoItems[i]) ? -1 : 1;\n      }\n    }\n    return 0;\n  }\n\n  function getNodeProperty(node, propertyName) {\n    return ((node != null) && (node[propertyName] != null)) ? node[propertyName] : '';\n  }\n\n  function compareNodeData(nodeA, nodeB) {\n    const\n      nodeAName = getNodeProperty(nodeA, 'name').toLowerCase(),\n      nodeBName = getNodeProperty(nodeB, 'name').toLowerCase(),\n      nodeAAddress = getNodeProperty(nodeA, 'address'),\n      nodeBAddress = getNodeProperty(nodeB, 'address');\n    let result = 0;\n\n    if ((nodeAName !== '') && (nodeBName !== '')) {\n      result = nodeAName.localeCompare(nodeBName);\n    } else if ((nodeAName === '') && (nodeBName === '')) {\n      result = compareAddressIP(nodeAAddress, nodeBAddress);\n    } else {\n      if (nodeAName !== '') { result = -1; }\n      if (nodeBName !== '') { result = 1; }\n    }\n    return result;\n  }\n\n  return nodes\n    .filter(node => ((node != null) && ((node.id != null) && ((node.name != null) && (node.address != null)))))\n    .sort(compareNodeData);\n\n}\n\nfunction getWebWorker() {\n  if (webWorkerSingleton == null) {\n    const workerBuilder = AdremWebWorker.webWorkerBuilder();\n    workerBuilder.addFunctionCode(sortNodesByNameAndAddress, true);\n    webWorkerSingleton = workerBuilder.getWebWorker();\n  }\n  return webWorkerSingleton;\n}\n\nclass NetCrunchNodesOperations {\n\n  static asyncSortByNameAndAddress(nodes = []) {\n    return new Promise((resolve) => {\n      if (nodes.length < THREAD_WORKER_NODES_NUMBER) {\n        const result = sortNodesByNameAndAddress(nodes);\n        resolve(result);\n      } else {\n        const nodesRemoteBuffer = [];\n\n        nodes.forEach((node, index) => {\n          nodesRemoteBuffer.push({\n            id: node.id,\n            name: node.name,\n            address: node.address,\n            index\n          });\n        });\n\n        getWebWorker().sortNodesByNameAndAddress(nodesRemoteBuffer)\n          .then((sortedNodes) => {\n            const result = [];\n            sortedNodes.forEach(node => result.push(nodes[node.index]));\n            resolve(result);\n          });\n      }\n    });\n  }\n\n  static deviceTypeFilter(nodes = [], deviceTypePattern) {\n    return nodes.filter(node => node.checkDeviceType(deviceTypePattern));\n  }\n\n}\n\nexport {\n  NetCrunchNodesOperations\n};\n"]}