{"version":3,"sources":["../../../../../../src/datasource/services/netCrunchAPI/netCrunchConnection/networkData/networkAtlas.js"],"names":["NetCrunchNetworkNode","NetCrunchNetworkMap","NetCrunchNodes","ATLAS_ROOT_ID","MONITORING_PACKS_NET_ID","PRIVATE_PROPERTIES","connection","Symbol","nodes","atlasMaps","orphans","ROOT_MAP_REC","local","getValues","DisplayName","MapClassTag","NetIntId","NetCrunchNetworkAtlas","netCrunchServerConnection","Map","set","networkMap","addMapToParent","map","self","has","parentId","get","addChild","push","netId","filter","orphan","mapRec","addNetworkMap","nodeRec","node","add"],"mappings":"idAQSA,oB,cAAAA,oB,wBACAC,mB,aAAAA,mB,0BACAC,c,eAAAA,c,kgBAGPC,a,CAAgB,E,CAChBC,uB,CAA0B,C,CAC1BC,kB,CAAqB,CACnBC,WAAYC,OAAO,YAAP,CADO,CAEnBC,MAAOD,OAAO,OAAP,CAFY,CAGnBE,UAAWF,OAAO,WAAP,CAHQ,CAInBG,QAASH,OAAO,SAAP,CAJU,C,CAMrBI,Y,CAAe,CACbC,QADa,CAEbC,UAAW,oBAAM,CAAmB;AAClC,MAAO,CACLC,YAAa,eADR,CAELC,YAAa,WAFR,CAGLC,SAAUb,aAHL,CAKR,CARY,C,iCAWXc,qB,YAEJ,+BAAYC,CAAZ,CAAuC,6CACrC,KAAKb,mBAAmBC,UAAxB,EAAsCY,CADD,CAErC,KAAKb,mBAAmBG,KAAxB,EAAiC,GAAIN,eAFA,CAGrC,KAAKG,mBAAmBI,SAAxB,EAAqC,GAAIU,IAHJ,CAIrC,KAAKd,mBAAmBI,SAAxB,EAAmCW,GAAnC,CAAuCjB,aAAvC,CAAsD,GAAIF,oBAAJ,CAAwBU,YAAxB,CAAtD,CAJqC,CAKrC,KAAKN,mBAAmBK,OAAxB,IACD,C,6FAEaW,C,CAAY,CAkBxB,QAASC,EAAT,CAAwBC,CAAxB,CAA6B,CACvBC,EAAKnB,mBAAmBI,SAAxB,EAAmCgB,GAAnC,CAAuCF,EAAIG,QAA3C,CADuB,CAEzBF,EAAKnB,mBAAmBI,SAAxB,EACGkB,GADH,CACOJ,EAAIG,QADX,EAEGE,QAFH,CAEYL,CAFZ,CAFyB,CAMzBC,EAAKnB,mBAAmBK,OAAxB,EAAiCmB,IAAjC,CAAsCN,CAAtC,CAEH,CAzBD,GAAMC,GAAO,IAAb,CA2BAA,EAAKnB,mBAAmBI,SAAxB,EAAmCW,GAAnC,CAAuCC,EAAWS,KAAlD,CAAyDT,CAAzD,CA5BwB,CAOxB,SAAgCE,CAAhC,CAAqC,CACnCC,EAAKnB,mBAAmBK,OAAxB,EAAmCc,EAAKnB,mBAAmBK,OAAxB,EAChCqB,MADgC,CACzB,SAACC,CAAD,CAAY,OACdA,GAAON,QAAP,GAAoBH,EAAIO,KADV,GAEhBP,EAAIK,QAAJ,CAAaI,CAAb,CAFgB,IAMnB,CAPgC,CAQpC,CAaD,CAAuBX,CAAvB,CA7BwB,CAGxB,SAAiCE,CAAjC,CAAsC,CACpC,MAAQA,GAAIO,KAAJ,GAAc1B,uBACvB,CAyBI,CAAwBiB,CAAxB,CA9BmB,EA+BtBC,EAAeD,CAAf,CAEH,C,sCAEMY,C,CAAQ,CACb,GAAMZ,GAAa,GAAIpB,oBAAJ,CAAwBgC,CAAxB,CAAnB,CACA,KAAKC,aAAL,CAAmBb,CAAnB,CACD,C,wCAEOc,C,CAAS,CACf,GAAMC,GAAO,GAAIpC,qBAAJ,CAAyBmC,CAAzB,CAAkC,KAAK9B,mBAAmBC,UAAxB,CAAlC,CAAb,CACA,KAAKD,mBAAmBG,KAAxB,EAA+B6B,GAA/B,CAAmCD,CAAnC,CACD,C,iCAEW,CACV,MAAO,MAAK/B,mBAAmBG,KAAxB,CACR,C,qCAEe,CACd,MAAO,MAAKH,mBAAmBI,SAAxB,CACR,C,4CAEsB,CACrB,MAAO,MAAKA,SAAL,CAAekB,GAAf,CAAmBxB,aAAnB,CACR,C,2CAEqB,OAChB,MAAKE,mBAAmBI,SAAxB,EAAmCgB,GAAnC,CAAuCrB,uBAAvC,CADgB,CAEX,KAAKC,mBAAmBI,SAAxB,EAAmCkB,GAAnC,CAAuCvB,uBAAvC,CAFW,CAIb,IACR,C,8DAKDa,qB","file":"networkAtlas.js","sourcesContent":["/**\r\n * @license\r\n * Copyright AdRem Software. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an Apache License, Version 2.0 that can be\r\n * found in the LICENSE file.\r\n */\r\n\r\nimport { NetCrunchNetworkNode } from './networkNode';\r\nimport { NetCrunchNetworkMap } from './networkMap';\r\nimport { NetCrunchNodes } from './networkNodes';\r\n\r\nconst\r\n  ATLAS_ROOT_ID = '',\r\n  MONITORING_PACKS_NET_ID = 3,\r\n  PRIVATE_PROPERTIES = {\r\n    connection: Symbol('connection'),\r\n    nodes: Symbol('nodes'),\r\n    atlasMaps: Symbol('atlasMaps'),\r\n    orphans: Symbol('orphans')\r\n  },\r\n  ROOT_MAP_REC = {\r\n    local: {},\r\n    getValues: () => {                  // eslint-disable-line\r\n      return {\r\n        DisplayName: 'Network Atlas',\r\n        MapClassTag: 'dynfolder',\r\n        NetIntId: ATLAS_ROOT_ID\r\n      };\r\n    }\r\n  };\r\n\r\nclass NetCrunchNetworkAtlas {\r\n\r\n  constructor(netCrunchServerConnection) {\r\n    this[PRIVATE_PROPERTIES.connection] = netCrunchServerConnection;\r\n    this[PRIVATE_PROPERTIES.nodes] = new NetCrunchNodes();\r\n    this[PRIVATE_PROPERTIES.atlasMaps] = new Map();\r\n    this[PRIVATE_PROPERTIES.atlasMaps].set(ATLAS_ROOT_ID, new NetCrunchNetworkMap(ROOT_MAP_REC));\r\n    this[PRIVATE_PROPERTIES.orphans] = [];\r\n  }\r\n\r\n  addNetworkMap(networkMap) {\r\n    const self = this;\r\n\r\n    function isMonitoringPacksFolder(map) {\r\n      return (map.netId === MONITORING_PACKS_NET_ID);\r\n    }\r\n\r\n    function addChildrenFromOrphans(map) {\r\n      self[PRIVATE_PROPERTIES.orphans] = self[PRIVATE_PROPERTIES.orphans]\r\n        .filter((orphan) => {\r\n          if (orphan.parentId === map.netId) {\r\n            map.addChild(orphan);\r\n            return false;\r\n          }\r\n          return true;\r\n        });\r\n    }\r\n\r\n    function addMapToParent(map) {\r\n      if (self[PRIVATE_PROPERTIES.atlasMaps].has(map.parentId)) {\r\n        self[PRIVATE_PROPERTIES.atlasMaps]\r\n          .get(map.parentId)\r\n          .addChild(map);\r\n      } else {\r\n        self[PRIVATE_PROPERTIES.orphans].push(map);\r\n      }\r\n    }\r\n\r\n    self[PRIVATE_PROPERTIES.atlasMaps].set(networkMap.netId, networkMap);\r\n    addChildrenFromOrphans(networkMap);\r\n    if (!isMonitoringPacksFolder(networkMap)) {\r\n      addMapToParent(networkMap);\r\n    }\r\n  }\r\n\r\n  addMap(mapRec) {\r\n    const networkMap = new NetCrunchNetworkMap(mapRec);\r\n    this.addNetworkMap(networkMap);\r\n  }\r\n\r\n  addNode(nodeRec) {\r\n    const node = new NetCrunchNetworkNode(nodeRec, this[PRIVATE_PROPERTIES.connection]);\r\n    this[PRIVATE_PROPERTIES.nodes].add(node);\r\n  }\r\n\r\n  get nodes() {\r\n    return this[PRIVATE_PROPERTIES.nodes];\r\n  }\r\n\r\n  get atlasMaps() {\r\n    return this[PRIVATE_PROPERTIES.atlasMaps];\r\n  }\r\n\r\n  get networkAtlasRoot() {\r\n    return this.atlasMaps.get(ATLAS_ROOT_ID);\r\n  }\r\n\r\n  get monitoringPacks() {\r\n    if (this[PRIVATE_PROPERTIES.atlasMaps].has(MONITORING_PACKS_NET_ID)) {\r\n      return this[PRIVATE_PROPERTIES.atlasMaps].get(MONITORING_PACKS_NET_ID);\r\n    }\r\n    return null;\r\n  }\r\n\r\n}\r\n\r\nexport {\r\n  NetCrunchNetworkAtlas\r\n};\r\n"]}