{"version":3,"sources":["../../../../../../src/datasource/services/netCrunchAPI/netCrunchConnection/networkData/networkAtlas.js"],"names":["NetCrunchNetworkNode","NetCrunchNetworkMap","NetCrunchNodes","ATLAS_ROOT_ID","PRIVATE_PROPERTIES","connection","Symbol","nodes","atlas","orphans","ROOT_MAP_REC","local","getValues","DisplayName","MapClassTag","NetIntId","NetCrunchNetworkAtlas","netCrunchServerConnection","Map","set","mapRec","networkMap","netId","filter","orphan","parentId","get","addChild","has","push","nodeRec","newNode","add"],"mappings":"ybAQSA,oB,cAAAA,oB,wBACAC,mB,aAAAA,mB,0BACAC,c,eAAAA,c,kgBAGPC,a,CAAgB,E,CAChBC,kB,CAAqB,CACnBC,WAAYC,OAAO,YAAP,CADO,CAEnBC,MAAOD,OAAO,OAAP,CAFY,CAGnBE,MAAOF,OAAO,OAAP,CAHY,CAInBG,QAASH,OAAO,SAAP,CAJU,C,CAMrBI,Y,CAAe,CACbC,QADa,CAEbC,UAAW,oBAAM,CAAmB;AAClC,MAAO,CACLC,YAAa,eADR,CAELC,YAAa,WAFR,CAGLC,SAAUZ,aAHL,CAKR,CARY,C,iCAWXa,qB,YAEJ,+BAAYC,CAAZ,CAAuC,6CACrC,KAAKb,mBAAmBC,UAAxB,EAAsCY,CADD,CAErC,KAAKb,mBAAmBG,KAAxB,EAAiC,GAAIL,eAFA,CAGrC,KAAKE,mBAAmBI,KAAxB,EAAiC,GAAIU,IAHA,CAIrC,KAAKd,mBAAmBI,KAAxB,EAA+BW,GAA/B,CAAmChB,aAAnC,CAAkD,GAAIF,oBAAJ,CAAwBS,YAAxB,CAAlD,CAJqC,CAKrC,KAAKN,mBAAmBK,OAAxB,IACD,C,+EAEMW,C,CAAQ,gBAEXC,EAAa,GAAIpB,oBAAJ,CAAwBmB,CAAxB,CAFF,CAIb,KAAKhB,mBAAmBI,KAAxB,EAA+BW,GAA/B,CAAmCE,EAAWC,KAA9C,CAAqDD,CAArD,CAJa,CAMb,KAAKjB,mBAAmBK,OAAxB,EAAmC,KAAKL,mBAAmBK,OAAxB,EAChCc,MADgC,CACzB,SAACC,CAAD,CAAY,OACdA,GAAOC,QAAP,GAAoBJ,EAAWC,KADjB,GAEhB,MAAKlB,mBAAmBI,KAAxB,EACGkB,GADH,CACOL,EAAWC,KADlB,EAEGK,QAFH,CAEYH,CAFZ,CAFgB,IAQnB,CATgC,CANtB,CAiBT,KAAKpB,mBAAmBI,KAAxB,EAA+BoB,GAA/B,CAAmCP,EAAWI,QAA9C,CAjBS,CAkBX,KAAKrB,mBAAmBI,KAAxB,EACGkB,GADH,CACOL,EAAWI,QADlB,EAEGE,QAFH,CAEYN,CAFZ,CAlBW,CAsBX,KAAKjB,mBAAmBK,OAAxB,EAAiCoB,IAAjC,CAAsCR,CAAtC,CAEH,C,wCAEOS,C,CAAS,CACf,GAAMC,GAAU,GAAI/B,qBAAJ,CAAyB8B,CAAzB,CAAkC,KAAK1B,mBAAmBC,UAAxB,CAAlC,CAAhB,CACA,KAAKD,mBAAmBG,KAAxB,EAA+ByB,GAA/B,CAAmCD,CAAnC,CACD,C,iCAEW,CACV,MAAO,MAAK3B,mBAAmBG,KAAxB,CACR,C,iCAEW,CACV,MAAO,MAAKH,mBAAmBI,KAAxB,CACR,C,qCAEe,CACd,MAAO,MAAKA,KAAL,CAAWkB,GAAX,CAAevB,aAAf,CACR,C,8DAKDa,qB","file":"networkAtlas.js","sourcesContent":["/**\r\n * @license\r\n * Copyright AdRem Software. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an Apache License, Version 2.0 that can be\r\n * found in the LICENSE file.\r\n */\r\n\r\nimport { NetCrunchNetworkNode } from './networkNode';\r\nimport { NetCrunchNetworkMap } from './networkMap';\r\nimport { NetCrunchNodes } from './networkNodes';\r\n\r\nconst\r\n  ATLAS_ROOT_ID = '',\r\n  PRIVATE_PROPERTIES = {\r\n    connection: Symbol('connection'),\r\n    nodes: Symbol('nodes'),\r\n    atlas: Symbol('atlas'),\r\n    orphans: Symbol('orphans')\r\n  },\r\n  ROOT_MAP_REC = {\r\n    local: {},\r\n    getValues: () => {                  // eslint-disable-line\r\n      return {\r\n        DisplayName: 'Network Atlas',\r\n        MapClassTag: 'dynfolder',\r\n        NetIntId: ATLAS_ROOT_ID\r\n      };\r\n    }\r\n  };\r\n\r\nclass NetCrunchNetworkAtlas {\r\n\r\n  constructor(netCrunchServerConnection) {\r\n    this[PRIVATE_PROPERTIES.connection] = netCrunchServerConnection;\r\n    this[PRIVATE_PROPERTIES.nodes] = new NetCrunchNodes();\r\n    this[PRIVATE_PROPERTIES.atlas] = new Map();\r\n    this[PRIVATE_PROPERTIES.atlas].set(ATLAS_ROOT_ID, new NetCrunchNetworkMap(ROOT_MAP_REC));\r\n    this[PRIVATE_PROPERTIES.orphans] = [];\r\n  }\r\n\r\n  addMap(mapRec) {\r\n    const\r\n      networkMap = new NetCrunchNetworkMap(mapRec);\r\n\r\n    this[PRIVATE_PROPERTIES.atlas].set(networkMap.netId, networkMap);\r\n\r\n    this[PRIVATE_PROPERTIES.orphans] = this[PRIVATE_PROPERTIES.orphans]\r\n      .filter((orphan) => {\r\n        if (orphan.parentId === networkMap.netId) {\r\n          this[PRIVATE_PROPERTIES.atlas]\r\n            .get(networkMap.netId)\r\n            .addChild(orphan);\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n\r\n    if (this[PRIVATE_PROPERTIES.atlas].has(networkMap.parentId)) {\r\n      this[PRIVATE_PROPERTIES.atlas]\r\n        .get(networkMap.parentId)\r\n        .addChild(networkMap);\r\n    } else {\r\n      this[PRIVATE_PROPERTIES.orphans].push(networkMap);\r\n    }\r\n  }\r\n\r\n  addNode(nodeRec) {\r\n    const newNode = new NetCrunchNetworkNode(nodeRec, this[PRIVATE_PROPERTIES.connection]);\r\n    this[PRIVATE_PROPERTIES.nodes].add(newNode);\r\n  }\r\n\r\n  get nodes() {\r\n    return this[PRIVATE_PROPERTIES.nodes];\r\n  }\r\n\r\n  get atlas() {\r\n    return this[PRIVATE_PROPERTIES.atlas];\r\n  }\r\n\r\n  get atlasRoot() {\r\n    return this.atlas.get(ATLAS_ROOT_ID);\r\n  }\r\n\r\n}\r\n\r\nexport {\r\n  NetCrunchNetworkAtlas\r\n};\r\n"]}