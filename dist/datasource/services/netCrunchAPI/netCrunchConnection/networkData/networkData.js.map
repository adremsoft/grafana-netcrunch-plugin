{"version":3,"sources":["../../../../../../src/datasource/services/netCrunchAPI/netCrunchConnection/networkData/networkData.js"],"names":["NetCrunchNetworkData","adremClient","netCrunchServerConnection","openRemoteData","table","query","processFunction","notifyFunction","dataList","RemoteDataListStore","self","Promise","resolve","on","data","length","forEach","open","processHostsData","nodeRec","networkAtlas","addNode","processMapData","mapRec","addMap","NetCrunchNetworkAtlas","nodesReady","networksReady","remoteDataInitialized","promise","nodes","networks","atlas","all","then","init","hostsData","networkData","onNodesChanged","onNetworksChanged"],"mappings":"kHAYA,QAASA,qBAAT,CAA8BC,CAA9B,CAA2CC,CAA3C,CAAsE,CAYpE,QAASC,EAAT,CAAwBC,CAAxB,CAA+BC,CAA/B,CAAsCC,CAAtC,CAAuDC,CAAvD,CAAuE,CACrE,GACEC,GAAW,GAAIP,GAAYQ,mBAAhB,CAAoC,OAApC,KAAmDP,CAAnD,CADb,CAEEQ,EAAO,IAFT,CAIA,MAAO,IAAIC,QAAJ,CAAY,SAACC,CAAD,CAAa,CACC,UAA3B,QAAON,EADmB,EAE5BE,EAASK,EAAT,CAAY,gBAAZ,CAA8B,SAACC,CAAD,CAAU,CAChB,IAAjB,IAASA,IAAV,EAAmD,CAAvB,GAASA,IAAT,CAAcC,MADR,EAEpCD,EAAKE,OAAL,CAAaV,CAAb,CAA8BI,CAA9B,CAEH,CAJD,CAF4B,CASA,UAA1B,QAAOH,EATmB,EAU5BC,EAASK,EAAT,CAAY,SAAZ,CAAuB,UAAM,CAC3BN,GACD,CAFD,CAV4B,CAe9BC,EAASS,IAAT,CAAcb,CAAd,CAAqBC,CAArB,CAA4B,UAAM,CAChCO,GACD,CAFD,CAGD,CAlBM,CAmBR,CAED,QAASM,EAAT,CAA0BC,CAA1B,CAAmC,CACjCC,EAAaC,OAAb,CAAqBF,CAArB,CACD,CAED,QAASG,EAAT,CAAwBC,CAAxB,CAAgC,CAC9BH,EAAaI,MAAb,CAAoBD,CAApB,CACD,CA1CD,GACEH,GAAe,GAAIK,sBAAJ,CAA0BvB,CAA1B,CADjB,CAEEwB,IAFF,CAGEC,IAHF,CAKIC,EAAwB,IAL5B,CA4CA,MArCAF,GAAWG,OAAX,CAAqB,GAAIlB,QAAJ,CAAY,kBAAYe,GAAWd,OAAX,CAAqBA,CAAjC,CAAZ,CAqCrB,CApCAe,EAAcE,OAAd,CAAwB,GAAIlB,QAAJ,CAAY,kBAAYgB,GAAcf,OAAd,CAAwBA,CAApC,CAAZ,CAoCxB,CAAO,CACLkB,MAAO,uBAAMJ,GAAWG,OAAjB,CADF,CAELE,SAAU,0BAAMJ,GAAcE,OAApB,CAFL,CAGLG,MAAO,uBAAMrB,SACVsB,GADU,CACN,CAACP,EAAWG,OAAZ,CAAqBF,EAAcE,OAAnC,CADM,EAEVK,IAFU,CAEL,iBAAMd,EAAN,CAFK,CAAN,CAHF,CAOLe,KAAM,eAAW,CACf,GAWEzB,GAAO,IAXT,CAcE0B,QAdF,CAeEC,QAfF,CADe,MAiCc,KAAzB,GAjCW,EAsCfD,EAAYjC,EAAe,OAAf,CAlCI,uDAkCJ,CAAqCe,CAArC,CApBZ,UAAwB,CACtBQ,EAAWd,OAAX,CAAmBQ,EAAaU,KAAhC,CADsB,CAEa,UAA/B,QAAOpB,GAAK4B,cAFM,EAGpB5B,EAAK4B,cAAL,EAEH,CAeW,CAtCG,CAyCfD,EAAclC,EAAe,UAAf,oSAA2CmB,CAA3C,CAhBd,UAA2B,CACzBK,EAAcf,OAAd,CAAsBQ,EAAaY,KAAnC,CADyB,CAGa,UAAlC,QAAOtB,GAAK6B,iBAHS,EAIvB7B,EAAK6B,iBAAL,EAEH,CAUa,CAzCC,CA2CfX,EAAwBjB,QAAQsB,GAAR,CAAY,CAACG,CAAD,CAAYC,CAAZ,CAAZ,CA3CT,CA6CRT,CA7CQ,EAkCNA,CAYV,CArDI,CAwDR,CAlHD;;;;;;GAQA,kE,wCAESH,qB,eAAAA,qB,qDA2GPzB,oB","file":"networkData.js","sourcesContent":["/**\r\n * @license\r\n * Copyright AdRem Software. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an Apache License, Version 2.0 that can be\r\n * found in the LICENSE file.\r\n */\r\n\r\n/* eslint-disable func-names, object-shorthand, prefer-template */\r\n\r\nimport { NetCrunchNetworkAtlas } from './networkAtlas';\r\n\r\nfunction NetCrunchNetworkData(adremClient, netCrunchServerConnection) {\r\n\r\n  const\r\n    networkAtlas = new NetCrunchNetworkAtlas(netCrunchServerConnection),\r\n    nodesReady = {},\r\n    networksReady = {};\r\n\r\n  let remoteDataInitialized = null;\r\n\r\n  nodesReady.promise = new Promise(resolve => (nodesReady.resolve = resolve));\r\n  networksReady.promise = new Promise(resolve => (networksReady.resolve = resolve));\r\n\r\n  function openRemoteData(table, query, processFunction, notifyFunction) {\r\n    const\r\n      dataList = new adremClient.RemoteDataListStore('ncSrv', 1000, netCrunchServerConnection),\r\n      self = this;\r\n\r\n    return new Promise((resolve) => {\r\n      if (typeof processFunction === 'function') {\r\n        dataList.on('record-changed', (data) => {\r\n          if ((dataList.data != null) && (dataList.data.length > 0)) {\r\n            data.forEach(processFunction, self);\r\n          }\r\n        });\r\n      }\r\n\r\n      if (typeof notifyFunction === 'function') {\r\n        dataList.on('changed', () => {\r\n          notifyFunction();\r\n        });\r\n      }\r\n\r\n      dataList.open(table, query, () => {\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  function processHostsData(nodeRec) {\r\n    networkAtlas.addNode(nodeRec);\r\n  }\r\n\r\n  function processMapData(mapRec) {\r\n    networkAtlas.addMap(mapRec);\r\n  }\r\n\r\n  return {\r\n    nodes: () => nodesReady.promise,\r\n    networks: () => networksReady.promise,\r\n    atlas: () => Promise\r\n      .all([nodesReady.promise, networksReady.promise])\r\n      .then(() => networkAtlas),\r\n\r\n    init: function() {\r\n      const\r\n        PERFORMANCE_VIEWS_NET_INT_ID = 2,\r\n        MONITORING_PACKS_NET_INT_ID = 3,\r\n        HOSTS_QUERY = 'Select Id, Name, Address, DeviceType, GlobalDataNode ',\r\n        NETWORKS_QUERY = 'Select NetIntId, DisplayName, HostMapData, IconId, ' +\r\n                         'MapType, NetworkData, MapClassTag ' +\r\n                         'where (MapClassTag != \\'policynet\\') && (MapClassTag != \\'pnet\\') && ' +\r\n                         '(MapClassTag != \\'dependencynet\\') && ' +\r\n                         '(MapClassTag != \\'issuesnet\\') && (MapClassTag != \\'all\\') && ' +\r\n                         '(NetIntId != ' + PERFORMANCE_VIEWS_NET_INT_ID + ') && ' +\r\n                         '(NetIntId != ' + MONITORING_PACKS_NET_INT_ID + ')',\r\n        self = this;\r\n\r\n      let\r\n        hostsData,\r\n        networkData;\r\n\r\n      function hostsChanged() {\r\n        nodesReady.resolve(networkAtlas.nodes);\r\n        if (typeof self.onNodesChanged === 'function') {\r\n          self.onNodesChanged();\r\n        }\r\n      }\r\n\r\n      function networksChanged() {\r\n        networksReady.resolve(networkAtlas.atlas);\r\n\r\n        if (typeof self.onNetworksChanged === 'function') {\r\n          self.onNetworksChanged();\r\n        }\r\n      }\r\n\r\n      if (remoteDataInitialized != null) {\r\n        return remoteDataInitialized;\r\n      }\r\n\r\n      // eslint-disable-next-line\r\n      hostsData = openRemoteData('Hosts', HOSTS_QUERY, processHostsData, hostsChanged);\r\n\r\n      // eslint-disable-next-line\r\n      networkData = openRemoteData('Networks', NETWORKS_QUERY, processMapData, networksChanged);\r\n\r\n      remoteDataInitialized = Promise.all([hostsData, networkData]);\r\n\r\n      return remoteDataInitialized;\r\n    }\r\n\r\n  };\r\n}\r\n\r\nexport {\r\n  NetCrunchNetworkData\r\n};\r\n"]}