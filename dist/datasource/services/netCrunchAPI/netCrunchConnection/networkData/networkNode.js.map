{"version":3,"sources":["../../../../../../src/datasource/services/netCrunchAPI/netCrunchConnection/networkData/networkNode.js"],"names":["MAP_ICON_ID_UNKNOWN","ICON_SIZE","DEVICE_TYPES","PRIVATE_PROPERTIES","local","Symbol","values","NetCrunchNetworkNode","nodeRec","netCrunchServerConnection","deviceType","parseDeviceType","getValues","DeviceType","Object","assign","iconUrl","getIconUrl","iconId","deviceTypePattern","pattern","toUpperCase","length","classId","some","categoryId","Id","Name","Address","GlobalDataNode","data","xml","window","DOMParser","parseFromString","e","subCategoryId","manufacturerId","deviceTypeXML","doc","parseXML","getElementsByTagName","createDeviceType","getAttribute","serverConnection","ncSrv","IMapIcons","GetIcon","asURL","Client","urlFilter"],"mappings":"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","file":"networkNode.js","sourcesContent":["/**\n * @license\n * Copyright AdRem Software. All Rights Reserved.\n *\n * Use of this source code is governed by an Apache License, Version 2.0 that can be\n * found in the LICENSE file.\n */\n\n/* global window */\n/* eslint-disable quote-props */\n\nconst\n  MAP_ICON_ID_UNKNOWN = 100,\n  ICON_SIZE = 25,\n  DEVICE_TYPES = {\n    'WINDOWS': [1, [1, 2]],\n    'WINDOWS.SERVER': [1, [1]],\n    'WINDOWS.WORKSTATION': [1, [2]],\n    'NOVELL': [1, [3]],\n    'LINUX': [1, [4]],\n    'UNIX': [1, [5]],\n    'SOLARIS': [1, [6]],\n    'BSD': [1, [7]],\n    'IBM': [1, [8]],\n    'MACOS': [1, [9]],\n    'ESX': [1, [10]],\n    'XENSERVER': [1, [11]]\n  },\n  PRIVATE_PROPERTIES = {\n    local: Symbol('local'),\n    values: Symbol('values')\n  };\n\nclass NetCrunchNetworkNode {\n\n  constructor(nodeRec, netCrunchServerConnection) {\n    const\n      deviceType = NetCrunchNetworkNode.parseDeviceType(nodeRec.getValues().DeviceType);\n\n    this[PRIVATE_PROPERTIES.values] = nodeRec.getValues();\n    this[PRIVATE_PROPERTIES.local] = Object.assign({}, deviceType);\n    this[PRIVATE_PROPERTIES.local].iconUrl = NetCrunchNetworkNode.getIconUrl(this.iconId, netCrunchServerConnection);\n  }\n\n  get id() {\n    return this[PRIVATE_PROPERTIES.values].Id;\n  }\n\n  get name() {\n    return this[PRIVATE_PROPERTIES.values].Name;\n  }\n\n  get address() {\n    return this[PRIVATE_PROPERTIES.values].Address;\n  }\n\n  get globalDataNode() {\n    return this[PRIVATE_PROPERTIES.values].GlobalDataNode;\n  }\n\n  get iconUrl() {\n    return this[PRIVATE_PROPERTIES.local].iconUrl;\n  }\n\n  static parseXML(data) {\n    let xml;\n\n    if (!data || typeof data !== 'string') {\n      return null;\n    }\n\n    try {\n      xml = (new window.DOMParser()).parseFromString(data, 'text/xml');\n    } catch (e) {\n      xml = undefined;\n    }\n\n    return xml;\n  }\n\n  static createDeviceType(iconId = 0, classId, categoryId, subCategoryId, manufacturerId) {\n    return {\n      iconId,\n      classId,\n      categoryId,\n      subCategoryId,\n      manufacturerId\n    };\n  }\n\n  static parseDeviceType(deviceTypeXML) {\n\n    if ((deviceTypeXML !== '') && (deviceTypeXML != null)) {\n      const\n        doc = NetCrunchNetworkNode.parseXML(deviceTypeXML),\n        deviceType = doc.getElementsByTagName('devtype');\n\n      if (deviceType[0] != null) {\n        return NetCrunchNetworkNode.createDeviceType(\n          deviceType[0].getAttribute('iconid') || MAP_ICON_ID_UNKNOWN,\n          deviceType[0].getAttribute('classid'),\n          deviceType[0].getAttribute('CategoryId'),\n          deviceType[0].getAttribute('SubCategoryId'),\n          deviceType[0].getAttribute('ManufacturerId')\n        );\n      }\n      return NetCrunchNetworkNode.createDeviceType();\n    }\n\n    return NetCrunchNetworkNode.createDeviceType();\n  }\n\n  static getIconUrl(iconId, serverConnection) {\n    const iconUrl = serverConnection.ncSrv.IMapIcons.GetIcon.asURL(iconId, ICON_SIZE);\n    return serverConnection.Client.urlFilter(iconUrl);\n  }\n\n  checkDeviceType(deviceTypePattern) {\n    const pattern = DEVICE_TYPES[deviceTypePattern.toUpperCase()];\n\n    if ((pattern != null) && (pattern.length === 2)) {\n      return ((this[PRIVATE_PROPERTIES.local].classId === String(pattern[0])) &&\n               pattern[1].some(categoryId => (this[PRIVATE_PROPERTIES.local].categoryId === String(categoryId))));\n    }\n\n    return false;\n  }\n\n}\n\nexport {\n  NetCrunchNetworkNode\n};\n"]}