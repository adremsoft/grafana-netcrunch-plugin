{"version":3,"sources":["../../../../../src/datasource/services/netCrunchAPI/netCrunchConnection/countersData.js"],"names":["NetCrunchCountersData","adremClient","netCrunchServerConnection","addCountersToCache","nodeId","countersQuery","cache","addToCache","COUNTERS_CACHE_SECTION","getCountersFromCache","getFromCache","addDisplayCounterPathToCache","counterPath","displayCounterPathQuery","COUNTERS_PATH_CACHE_SECTION","getDisplayCounterPathFromCache","addMonitorsToCache","monitorsQuery","MONITORS_CACHE_SECTION","getMonitorsFromCache","ncCounters","NetCrunchCounters","NetCrunchSessionCache","trendDB","trendDBReadyResolve","trendDBReadyReject","trendDBReady","Promise","resolve","reject","monitorMgrInf","monitorMgrInfReadyResolve","monitorMgrInfReadyReject","monitorMgrInfReady","addSection","prepareCountersForMonitors","counters","createCounterObject","counter","fromCache","self","convertCounterPathToDisplay","then","displayName","name","compareCounters","counterA","counterB","sortCounters","monitors","Object","keys","forEach","monitorId","sort","updateMonitorNames","getMonitors","monitorsMap","counterGroup","counterPromises","create","push","all","getCounters","NetCrunch","TrendDB","status","machineId","map","split","parsedCounterPath","parseCounterPath","counterPathObject","counterPathToDisplayQuery","isMIBCnt","obj","cnt","NETCRUNCH_COUNTER_CONST","CNT_TYPE","cstMIB","counterPathToDisplayStr","MonitorMgrIntf","getMonitorsInfo","monitor","getCountersForMonitors","getCountersTable","countersTable","monitorID","concat","table","findCounterByName","counterName","foundCounter","some"],"mappings":"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","file":"countersData.js","sourcesContent":["/**\n * @license\n * Copyright AdRem Software. All Rights Reserved.\n *\n * Use of this source code is governed by an Apache License, Version 2.0 that can be\n * found in the LICENSE file.\n */\n\n/* eslint-disable no-shadow, no-param-reassign, object-shorthand, func-names */\n\nimport { NetCrunchCounters, NETCRUNCH_COUNTER_CONST } from '../adrem/module';\nimport { NetCrunchSessionCache } from './sessionCache';\n\nfunction NetCrunchCountersData(adremClient, netCrunchServerConnection) {\n\n  const\n    COUNTERS_CACHE_SECTION = 'counters',\n    COUNTERS_PATH_CACHE_SECTION = 'countersPath',\n    MONITORS_CACHE_SECTION = 'monitors',\n    ncCounters = new NetCrunchCounters(adremClient, netCrunchServerConnection),\n    counterConsts = NETCRUNCH_COUNTER_CONST,\n    cache = new NetCrunchSessionCache();\n\n  let\n    trendDB = null,\n    trendDBReadyResolve,\n    trendDBReadyReject,\n    trendDBReady = new Promise((resolve, reject) => {         // eslint-disable-line\n      trendDBReadyResolve = resolve;\n      trendDBReadyReject = reject;\n    }),\n    monitorMgrInf = null,\n    monitorMgrInfReadyResolve,\n    monitorMgrInfReadyReject,\n    monitorMgrInfReady = new Promise((resolve, reject) => {   // eslint-disable-line\n      monitorMgrInfReadyResolve = resolve;\n      monitorMgrInfReadyReject = reject;\n    });\n\n  cache.addSection(COUNTERS_CACHE_SECTION);\n  cache.addSection(COUNTERS_PATH_CACHE_SECTION);\n  cache.addSection(MONITORS_CACHE_SECTION);\n\n  function addCountersToCache(nodeId, countersQuery) {\n    cache.addToCache(COUNTERS_CACHE_SECTION, nodeId, countersQuery);\n  }\n\n  function getCountersFromCache(nodeId) {\n    return cache.getFromCache(COUNTERS_CACHE_SECTION, nodeId);\n  }\n\n  function addDisplayCounterPathToCache(counterPath, displayCounterPathQuery) {\n    cache.addToCache(COUNTERS_PATH_CACHE_SECTION, counterPath, displayCounterPathQuery);\n  }\n\n  function getDisplayCounterPathFromCache(counterPath) {\n    return cache.getFromCache(COUNTERS_PATH_CACHE_SECTION, counterPath);\n  }\n\n  function addMonitorsToCache(monitorsQuery) {\n    cache.addToCache(MONITORS_CACHE_SECTION, MONITORS_CACHE_SECTION, monitorsQuery);\n  }\n\n  function getMonitorsFromCache() {\n    return cache.getFromCache(MONITORS_CACHE_SECTION, MONITORS_CACHE_SECTION);\n  }\n\n  return {\n\n    prepareCountersForMonitors: function(counters, fromCache = true) {\n      const\n        counterPromises = [],\n        self = this;\n\n      let monitors = Object.create(null);\n\n      function createCounterObject(counter, fromCache) {\n        return self.convertCounterPathToDisplay(counter[1], fromCache)\n          .then((displayName) => {              // eslint-disable-line\n            return {\n              name: counter[1],\n              displayName\n            };\n          });\n      }\n\n      function compareCounters(counterA, counterB) {\n        if (counterA.displayName < counterB.displayName) { return -1; }\n        if (counterA.displayName > counterB.displayName) { return 1; }\n        if (counterA.displayName === counterB.displayName) { return 0; }\n        return 0;\n      }\n\n      function sortCounters(monitors) {\n        Object.keys(monitors).forEach((monitorId) => {\n          monitors[monitorId].counters.sort(compareCounters);\n        });\n        return monitors;\n      }\n\n      function updateMonitorNames(monitors, fromCache) {\n        return self.getMonitors(fromCache)\n          .then((monitorsMap) => {\n            Object.keys(monitors).forEach((monitorId) => {\n              if (monitorsMap[monitorId] != null) {\n                monitors[monitorId].name = monitorsMap[monitorId].counterGroup;\n              }\n            });\n            return monitors;\n          });\n      }\n\n      counters.forEach((counter) => {\n        if (monitors[counter[0]] == null) {\n          monitors[counter[0]] = Object.create(null);\n          monitors[counter[0]].counters = [];\n        }\n\n        monitors[counter[0]].counters.push(createCounterObject(counter, fromCache));\n      });\n\n      Object.keys(monitors).forEach((monitorId) => {\n        counterPromises.push(\n          Promise.all(monitors[monitorId].counters)\n            .then((counters) => {\n              monitors[monitorId].counters = counters;\n            })\n        );\n      });\n\n      return Promise.all(counterPromises)\n        .then(() => {\n          monitors = sortCounters(monitors);\n          return updateMonitorNames(monitors, fromCache);\n        });\n    },\n\n    getCounters: function(nodeId, fromCache = true) {\n      let countersQuery;\n\n      countersQuery = (fromCache) ? getCountersFromCache(nodeId) : null;\n\n      if (countersQuery == null) {\n        if (trendDB == null) {\n          trendDB = new adremClient.NetCrunch.TrendDB('ncSrv', '', (status) => {\n            if (status === true) {\n              trendDBReadyResolve();\n            } else {\n              trendDBReadyReject();\n            }\n          }, netCrunchServerConnection);\n        }\n\n        countersQuery = trendDBReady\n          .then(() =>\n            new Promise((resolve) => {\n              trendDB.getCounters({ machineId: nodeId }, (counters) => {\n\n                // counters are in form [ \"<monitorId>=<counter>\", ... ]\n\n                counters = counters.map(counter => counter.split('='));\n                resolve(counters);\n              });\n            })\n          );\n        addCountersToCache(nodeId, countersQuery);\n      }\n      return countersQuery;\n    },\n\n    convertCounterPathToDisplay: function(counterPath, fromCache = true) {\n      const parsedCounterPath = ncCounters.parseCounterPath(counterPath);\n      let\n        counterPathObject,\n        counterPathToDisplayQuery;\n\n      counterPathToDisplayQuery = (fromCache) ? getDisplayCounterPathFromCache(counterPath) : null;\n\n      if (counterPathToDisplayQuery == null) {\n        if (ncCounters.isMIBCnt(parsedCounterPath.obj, parsedCounterPath.cnt) === true) {\n          counterPathObject = ncCounters.counterPathObject(counterPath, counterConsts.CNT_TYPE.cstMIB);\n          counterPathToDisplayQuery = ncCounters.counterPathToDisplayStr(counterPathObject, true, true);\n        } else {\n          counterPathToDisplayQuery = ncCounters.counterPathToDisplayStr(counterPath, true, true);\n        }\n        addDisplayCounterPathToCache(counterPath, counterPathToDisplayQuery);\n      }\n      return counterPathToDisplayQuery;\n    },\n\n    getMonitors: function(fromCache = true) {\n      let monitorsQuery;\n\n      monitorsQuery = (fromCache) ? getMonitorsFromCache() : null;\n\n      if (monitorsQuery == null) {\n        if (monitorMgrInf == null) {\n          monitorMgrInf = new adremClient.NetCrunch.MonitorMgrIntf('ncSrv', (status) => {\n            if (status === true) {\n              monitorMgrInfReadyResolve();\n            } else {\n              monitorMgrInfReadyReject();\n            }\n          }, netCrunchServerConnection);\n        }\n\n        monitorsQuery = monitorMgrInfReady\n          .then(() =>\n            new Promise((resolve) => {\n              monitorMgrInf.getMonitorsInfo({}, (monitors) => {\n                const monitorsMap = Object.create(null);\n\n                monitors.forEach((monitor) => {\n                  monitorsMap[monitor.monitorId] = monitor;\n                });\n                resolve(monitorsMap);\n              });\n            })\n          );\n        addMonitorsToCache(monitorsQuery);\n      }\n\n      return monitorsQuery;\n    },\n\n    getCountersForMonitors: function(nodeId, fromCache) {\n\n      function getCountersTable(counters) {\n        let countersTable = [];\n        Object.keys(counters).forEach((monitorID) => {\n          if (monitorID > 0) {\n            countersTable = countersTable.concat(counters[monitorID].counters);\n          }\n        });\n        return countersTable;\n      }\n\n      return this.getCounters(nodeId, fromCache)\n        .then(counters => this.prepareCountersForMonitors(counters, fromCache))\n        .then((counters) => {\n          counters.table = getCountersTable(counters);\n          return counters;\n        });\n    },\n\n    findCounterByName: function(counters, counterName) {\n      let foundCounter = null;\n\n      counters.table.some((counter) => {\n        if (counter.name === counterName) {\n          foundCounter = counter;\n          return true;\n        }\n        return false;\n      });\n      return foundCounter;\n    }\n\n  };\n}\n\nexport {\n  NetCrunchCountersData\n};\n"]}