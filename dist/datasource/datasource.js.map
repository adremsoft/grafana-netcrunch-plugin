{"version":3,"sources":["../../src/datasource/datasource.js"],"names":["CONNECTION_ERROR_MESSAGES","MAX_SAMPLE_COUNT","NetCrunchMetricFindQuery","PRIVATE_PROPERTIES","netCrunchAPI","Symbol","netCrunchConnection","atlas","nodes","processedNodes","alertSrv","templateSrv","SERIES_TYPES_DISPLAY_NAMES","min","avg","max","avail","delta","equal","distr","NET_CRUNCH_DATASOURCE_DI","NetCrunchDatasource","instanceSettings","netCrunchAPIService","$rootScope","$timeout","initNodesUpdating","networkAtlas","fromCache","updateNodes","then","nodesReady","nodesBuffer","operations","asyncSortByNameAndAddress","getAllNodes","sorted","all","processedNodesReady","$on","self","name","initAtlasUpdating","initAtlas","atlasReady","initDatasource","Promise","resolve","reject","netCrunchSession","url","getConnection","connection","catch","error","set","console","log","datasourceInitialization","serverUrl","jsonData","simpleUrl","username","user","password","datasourceReady","refreshView","$$phase","$apply","testConnection","status","message","options","validateCounterData","nodeId","counterName","countersAPI","counters","nodeName","getNodeById","nodeData","counterDisplayName","getCounters","counterList","counterData","findCounterByName","displayName","seriesTypesSelected","series","Object","keys","some","seriesKey","prepareSeriesName","datasource","alias","seriesName","extendSeriesName","baseSeriesName","seriesType","prepareSeriesDataQuery","range","trendsAPI","trends","getCounterTrendData","from","to","periodType","periodInterval","dataPoints","values","map","domain","prepareTargetQuery","target","decodedNodeId","decodeNodeIdTemplate","nodeID","targetDataQuery","hide","counterDataComplete","query","seriesDataQuery","seriesTypes","create","validateSeriesTypes","push","prepareQueries","targets","rawData","result","forEach","prepareChartData","targetsChartData","counterSeries","data","length","targetSeries","datapoints","grafanaDataConverter","performQuery","queryOptions","maxDataPoints","toUpperCase","indexOf","maxSampleCount","parseInt","Number","isInteger","MIN","Math","MAX","DEFAULT","rangeFrom","startOf","rangeTo","prepareTimeRange","dataQueries","concat","ERROR_MESSAGE","periodName","process","variables","filter","decodeDatasourceNameTemplate","variable","match","getNodeVariables","findIndex","datasourceName","replace","isNodeTemplate","templateValue","idValue","split","getCountersForMonitors","buffer","type","$inject"],"mappings":"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","file":"datasource.js","sourcesContent":["/**\r\n * @license\r\n * Copyright AdRem Software. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an Apache License, Version 2.0 that can be\r\n * found in the LICENSE file.\r\n */\r\n\r\nimport { CONNECTION_ERROR_MESSAGES, MAX_SAMPLE_COUNT } from './services/netCrunchAPI/module';\r\nimport { NetCrunchMetricFindQuery } from './templateQuery/metricFindQuery';\r\n\r\nconst\r\n  PRIVATE_PROPERTIES = {\r\n    netCrunchAPI: Symbol('netCrunchAPI'),\r\n    netCrunchConnection: Symbol('netCrunchConnection'),\r\n    atlas: Symbol('atlas'),\r\n    nodes: Symbol('nodes'),\r\n    processedNodes: Symbol('processedNodes'),\r\n    alertSrv: Symbol('alertSrv'),\r\n    templateSrv: Symbol('templateSrv')\r\n  },\r\n  SERIES_TYPES_DISPLAY_NAMES = {\r\n    min: 'Min',\r\n    avg: 'Avg',\r\n    max: 'Max',\r\n    avail: 'Avail',\r\n    delta: 'Delta',\r\n    equal: 'Equal',\r\n    distr: 'Distr'\r\n  },\r\n  NET_CRUNCH_DATASOURCE_DI = ['instanceSettings', 'netCrunchAPIService', 'alertSrv', 'templateSrv', '$rootScope',\r\n    '$timeout'];\r\n\r\nclass NetCrunchDatasource {\r\n\r\n  constructor(instanceSettings, netCrunchAPIService, alertSrv, templateSrv, $rootScope, $timeout) {\r\n    const\r\n      self = this,\r\n      nodesBuffer = {};\r\n    let\r\n      atlasReady,\r\n      nodesReady,\r\n      processedNodesReady,\r\n      datasourceInitialization = null;\r\n\r\n    function initNodesUpdating(networkAtlas, fromCache) {\r\n\r\n      function updateNodes() {\r\n        networkAtlas.atlas().then((atlas) => {\r\n          nodesReady(atlas.nodes);\r\n          nodesBuffer.operations = atlas.nodes.operations;\r\n          nodesBuffer.operations\r\n            .asyncSortByNameAndAddress(atlas.nodes.getAllNodes())\r\n              .then((sorted) => {\r\n                nodesBuffer.all = sorted;\r\n                processedNodesReady(nodesBuffer);\r\n              });\r\n        });\r\n      }\r\n\r\n      if (fromCache) {\r\n        updateNodes();\r\n      }\r\n\r\n      $rootScope.$on(`netcrunch-nodes-data-changed(${self.name})`, updateNodes);\r\n    }\r\n\r\n    function initAtlasUpdating(networkAtlas, fromCache) {\r\n\r\n      function initAtlas() {\r\n        networkAtlas.atlas()\r\n          .then(atlas => atlasReady(atlas));\r\n      }\r\n\r\n      if (fromCache) {\r\n        initAtlas();\r\n      }\r\n\r\n      $rootScope.$on(`netcrunch-networks-data-changed(${self.name})`, initAtlas);\r\n    }\r\n\r\n    function initDatasource() {\r\n      return new Promise((resolve, reject) => {\r\n        let netCrunchSession;\r\n\r\n        if (self.url != null) {\r\n          netCrunchSession = self[PRIVATE_PROPERTIES.netCrunchAPI].getConnection(self);\r\n          netCrunchSession\r\n            .then((connection) => {\r\n              const fromCache = connection.fromCache;\r\n              self[PRIVATE_PROPERTIES.netCrunchConnection] = connection;\r\n              initNodesUpdating(connection.networkAtlas, fromCache);\r\n              initAtlasUpdating(connection.networkAtlas, fromCache);\r\n              resolve();\r\n            })\r\n            .catch((error) => {\r\n              self[PRIVATE_PROPERTIES.alertSrv].set(self.name, CONNECTION_ERROR_MESSAGES[error], 'error');\r\n              /* eslint-disable no-console */\r\n              console.log('');\r\n              console.log('NetCrunch datasource');\r\n              console.log(`${self.name}: ${CONNECTION_ERROR_MESSAGES[error]}`);\r\n              /* eslint-enable no-console */\r\n              reject(CONNECTION_ERROR_MESSAGES[error]);\r\n            });\r\n        } else {\r\n          reject('');\r\n        }\r\n      });\r\n    }\r\n\r\n    this[PRIVATE_PROPERTIES.netCrunchAPI] = netCrunchAPIService;\r\n    this[PRIVATE_PROPERTIES.atlas] = new Promise(resolve => (atlasReady = resolve));\r\n    this[PRIVATE_PROPERTIES.nodes] = new Promise(resolve => (nodesReady = resolve));\r\n    this[PRIVATE_PROPERTIES.processedNodes] = new Promise(resolve => (processedNodesReady = resolve));\r\n    this[PRIVATE_PROPERTIES.alertSrv] = alertSrv;\r\n    this[PRIVATE_PROPERTIES.templateSrv] = templateSrv;\r\n\r\n    this.name = instanceSettings.name;\r\n    this.url = instanceSettings.url;\r\n    this.serverUrl = instanceSettings.jsonData.simpleUrl;\r\n    this.username = instanceSettings.jsonData.user;\r\n    this.password = instanceSettings.jsonData.password;\r\n    this.MAX_SAMPLE_COUNT = MAX_SAMPLE_COUNT;\r\n\r\n    this.datasourceReady = () => {\r\n      if (datasourceInitialization == null) {\r\n        datasourceInitialization = initDatasource();\r\n      }\r\n      return datasourceInitialization;\r\n    };\r\n\r\n    this.refreshView = () => {\r\n\r\n      /* This is workaround for wrong Grafana assumption that each datasource uses angular's synchronized HTTP requests.\r\n         NetCrunch datasource uses Adrem's client.js framework for communication and angular view is not updated when\r\n         tests finish */\r\n\r\n      $timeout(() => {\r\n        if ($rootScope.$$phase == null) {\r\n          $rootScope.$apply();\r\n        }\r\n      }, 0);\r\n    };\r\n\r\n  }\r\n\r\n  testDatasource() {\r\n    return new Promise((resolve) => {\r\n      this[PRIVATE_PROPERTIES.netCrunchAPI].testConnection(this)\r\n        .then(() => {\r\n          resolve({\r\n            status: 'success',\r\n            message: 'Datasource connected' });\r\n          this.refreshView();\r\n        })\r\n        .catch((error) => {\r\n          resolve({\r\n            status: 'error',\r\n            message: CONNECTION_ERROR_MESSAGES[error] });\r\n          this.refreshView();\r\n        });\r\n    });\r\n  }\r\n\r\n  query(options) {\r\n    const self = this;\r\n\r\n    function validateCounterData(nodeId, counterName) {\r\n      const\r\n        countersAPI = self[PRIVATE_PROPERTIES.netCrunchConnection].counters,\r\n        nodeName = self.getNodeById(nodeId).then(nodeData => ((nodeData != null) ? nodeData.name : null)),\r\n        counterDisplayName = self.getCounters(nodeId).then((counterList) => {\r\n          const counterData = countersAPI.findCounterByName(counterList, counterName);\r\n          return (counterData != null) ? counterData.displayName : null;\r\n        });\r\n\r\n      return Promise.all([nodeName, counterDisplayName])\r\n        .then((counterData) => {\r\n          const\r\n            nodeName = counterData[0],              // eslint-disable-line\r\n            counterDisplayName = counterData[1];    // eslint-disable-line\r\n\r\n          if ((nodeName != null) && (counterDisplayName != null)) {\r\n            return {\r\n              nodeName,\r\n              counterDisplayName\r\n            };\r\n          }\r\n\r\n          return null;\r\n        });\r\n    }\r\n\r\n    function seriesTypesSelected(series) {\r\n      return Object.keys(series).some(seriesKey => series[seriesKey] === true);\r\n    }\r\n\r\n    function prepareSeriesName(datasource, alias, counterData) {\r\n      let seriesName = `${counterData.nodeName} - ${counterData.counterDisplayName}`;\r\n\r\n      if (datasource != null) {\r\n        seriesName = `${self.name} - ${seriesName}`;\r\n      }\r\n      seriesName = alias || seriesName;\r\n\r\n      return seriesName;\r\n    }\r\n\r\n    function extendSeriesName(baseSeriesName, seriesType) {\r\n      return `${baseSeriesName}\\\\${SERIES_TYPES_DISPLAY_NAMES[seriesType]}`;\r\n    }\r\n\r\n    function prepareSeriesDataQuery(nodeId, counterName, range, series) {\r\n      const trendsAPI = self[PRIVATE_PROPERTIES.netCrunchConnection].trends;\r\n\r\n      if (seriesTypesSelected(series) === false) {\r\n        return Promise.resolve([]);\r\n      }\r\n\r\n      return trendsAPI.getCounterTrendData(nodeId, counterName, range.from, range.to,\r\n                                           range.periodType, range.periodInterval, series)\r\n        .then((dataPoints) => {                                         // eslint-disable-line\r\n          return Object.keys(dataPoints.values).map((seriesType) => {   // eslint-disable-line\r\n            return {\r\n              seriesType,\r\n              dataPoints: {\r\n                domain: dataPoints.domain,\r\n                values: dataPoints.values[seriesType]\r\n              }\r\n            };\r\n          });\r\n        });\r\n    }\r\n\r\n    function prepareTargetQuery(target, range, series) {\r\n      const decodedNodeId = self.decodeNodeIdTemplate(target.nodeID);\r\n      let targetDataQuery = null;\r\n\r\n      if ((target.hide !== true) && (target.counterDataComplete === true)) {\r\n\r\n        targetDataQuery = validateCounterData(decodedNodeId, target.counterName)\r\n          .then((counterData) => {\r\n            let\r\n              query = null,\r\n              seriesName,\r\n              seriesDataQuery,\r\n              seriesTypes;\r\n\r\n            if (counterData != null) {\r\n              seriesName = prepareSeriesName(target.datasource, target.alias, counterData);\r\n              query = [Promise.resolve(seriesName)];\r\n              seriesTypes = (series == null) ? Object.create(null) : series;\r\n              seriesTypes = NetCrunchDatasource.validateSeriesTypes(seriesTypes);\r\n              seriesDataQuery = prepareSeriesDataQuery(decodedNodeId, target.counterName, range, seriesTypes);\r\n              query.push(seriesDataQuery);\r\n              query = Promise.all(query);\r\n            }\r\n\r\n            return query;\r\n          });\r\n      }\r\n\r\n      return targetDataQuery;\r\n    }\r\n\r\n    function prepareQueries(targets, range, rawData) {\r\n      const result = [];\r\n      targets.forEach((target) => {\r\n        const\r\n          series = (rawData === true) ? { avg: true } : target.series,\r\n          targetDataQuery = prepareTargetQuery(target, range, series);\r\n\r\n        if (targetDataQuery != null) {\r\n          result.push(targetDataQuery);\r\n        }\r\n      });\r\n      return result;\r\n    }\r\n\r\n    function prepareChartData(targetsChartData, rawData) {\r\n      const\r\n        counterSeries = Object.create(null),\r\n        trendsAPI = self[PRIVATE_PROPERTIES.netCrunchConnection].trends;\r\n\r\n      counterSeries.data = [];\r\n\r\n      if ((targetsChartData != null) && (targetsChartData.length > 0)) {\r\n        targetsChartData.forEach((target) => {\r\n          const\r\n            baseSeriesName = (target != null) ? target[0] : null,\r\n            targetSeries = (target != null) ? target[1] : null,\r\n            extendedSeriesNames = !rawData;\r\n          let seriesName;\r\n\r\n          if (target != null) {\r\n            targetSeries.forEach((series) => {\r\n              if (extendedSeriesNames === true) {\r\n                seriesName = extendSeriesName(baseSeriesName, series.seriesType);\r\n              } else {\r\n                seriesName = baseSeriesName;\r\n              }\r\n              counterSeries.data.push({\r\n                target: seriesName,\r\n                datapoints: trendsAPI.grafanaDataConverter(series.dataPoints)\r\n              });\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      return counterSeries;\r\n    }\r\n\r\n    function performQuery(queryOptions) {\r\n\r\n      function getRawDataMode(maxDataPoints) {\r\n        return (typeof maxDataPoints === 'string') && (maxDataPoints.toUpperCase().indexOf('RAW') >= 0);\r\n      }\r\n\r\n      function getMaxDataPoints(maxDataPoints) {\r\n        const maxSampleCount = parseInt(maxDataPoints, 10);\r\n        if (Number.isInteger(maxSampleCount) && (maxSampleCount >= MAX_SAMPLE_COUNT.MIN)) {\r\n          return Math.min(maxSampleCount, MAX_SAMPLE_COUNT.MAX);\r\n        }\r\n        return MAX_SAMPLE_COUNT.DEFAULT;\r\n      }\r\n\r\n      const\r\n        RAW_TIME_RANGE_EXCEEDED_WARNING_TITLE = 'Time range is too long.',\r\n        RAW_TIME_RANGE_EXCEEDED_WARNING_TEXT = 'Maximum allowed length of time range for RAW data is ',\r\n        trends = self[PRIVATE_PROPERTIES.netCrunchConnection].trends,\r\n        targets = queryOptions.targets || [],\r\n        rawData = getRawDataMode(queryOptions.maxDataPoints),\r\n        maxDataPoints = getMaxDataPoints(queryOptions.maxDataPoints),\r\n        rangeFrom = queryOptions.range.from.startOf('minute'),\r\n        rangeTo = queryOptions.range.to.startOf('minute'),\r\n        range = trends.prepareTimeRange(rangeFrom, rangeTo, rawData, maxDataPoints);\r\n      let\r\n        dataQueries = [];\r\n\r\n      if (range.error == null) {\r\n        dataQueries = dataQueries.concat(prepareQueries(targets, range.result, rawData));\r\n      } else {\r\n        // eslint-disable-next-line\r\n        const ERROR_MESSAGE = RAW_TIME_RANGE_EXCEEDED_WARNING_TEXT + ' ' + range.error.periodInterval + ' ' +\r\n                              range.error.periodName + '.';\r\n        self[PRIVATE_PROPERTIES.alertSrv].set(RAW_TIME_RANGE_EXCEEDED_WARNING_TITLE, ERROR_MESSAGE, 'warning');\r\n      }\r\n\r\n      return Promise.all(dataQueries)\r\n        .then(targetsChartData => prepareChartData(targetsChartData, rawData));\r\n    }\r\n\r\n    try {\r\n      return this.datasourceReady()\r\n        .then(() => performQuery(options));\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n  }\r\n\r\n  metricFindQuery(query) {\r\n    return this.datasourceReady()\r\n      .then(() => {\r\n\r\n        if (query == null) {\r\n          return Promise.resolve([]);\r\n        }\r\n\r\n        return new NetCrunchMetricFindQuery(this, query).process();\r\n\r\n      });\r\n  }\r\n\r\n  atlas() {\r\n    return this.datasourceReady()\r\n      .then(() => this[PRIVATE_PROPERTIES.atlas]);\r\n  }\r\n\r\n  nodes() {\r\n    return this.datasourceReady()\r\n      .then(() => this[PRIVATE_PROPERTIES.processedNodes]);\r\n  }\r\n\r\n  getNodeVariables() {\r\n    return this[PRIVATE_PROPERTIES.templateSrv].variables\r\n      .filter(variable => (this.decodeDatasourceNameTemplate(variable.datasource) === this.name))\r\n      .filter(variable => (variable.query.match(/^[nN][oO][dD][eE][sS].*/)));\r\n  }\r\n\r\n  isNodeTemplate(nodeId) {\r\n    return ((!Number.isInteger(nodeId)) &&\r\n            (this.getNodeVariables().findIndex(variable => (nodeId === `$${variable.name}`)) >= 0));\r\n  }\r\n\r\n  decodeDatasourceNameTemplate(datasourceName) {\r\n    return this[PRIVATE_PROPERTIES.templateSrv].replace(datasourceName);\r\n  }\r\n\r\n  decodeNodeIdTemplate(nodeId) {\r\n\r\n    if (Number.isInteger(nodeId)) {\r\n      return nodeId;\r\n    } else if (this.isNodeTemplate(nodeId)) {\r\n      const templateValue = this[PRIVATE_PROPERTIES.templateSrv].replace(nodeId);\r\n      let idValue = Number(templateValue);\r\n\r\n      if (Number.isInteger(idValue)) {\r\n        return idValue;\r\n      }\r\n\r\n      idValue = templateValue.match(/^{(.*)}$/);\r\n      idValue = ((idValue != null) && (idValue.length === 2)) ? idValue[1].split(',') : null;\r\n      idValue = ((idValue != null) && (idValue.length > 0)) ? Number(idValue[0]) : null;\r\n\r\n      return idValue;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  getNodeById(nodeId) {\r\n    return this.datasourceReady()\r\n      .then(() => this[PRIVATE_PROPERTIES.nodes])\r\n      .then(nodes => nodes.getNodeById(this.decodeNodeIdTemplate(nodeId)));\r\n  }\r\n\r\n  getCounters(nodeId, fromCache = true) {\r\n    return this.datasourceReady()\r\n      .then(() => this[PRIVATE_PROPERTIES.netCrunchConnection].counters\r\n        .getCountersForMonitors(this.decodeNodeIdTemplate(nodeId), fromCache));\r\n  }\r\n\r\n  static validateSeriesTypes(series) {\r\n    const\r\n      types = ['min', 'avg', 'max', 'avail', 'delta', 'equal', 'distr'],\r\n      buffer = series || Object.create(null);\r\n\r\n    types.forEach((type) => {\r\n      buffer[type] = (buffer[type] == null) ? false : buffer[type];\r\n    });\r\n    return buffer;\r\n  }\r\n\r\n}\r\n\r\nNetCrunchDatasource.$inject = NET_CRUNCH_DATASOURCE_DI;\r\n\r\nexport {\r\n  NetCrunchDatasource\r\n};\r\n"]}