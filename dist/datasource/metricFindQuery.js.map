{"version":3,"sources":["../../src/datasource/metricFindQuery.js"],"names":["NetCrunchMetricFindQuery","datasource","query","selectors","createQueryResult","nodes","map","node","ipAddress","address","text","name","value","id","parameters","split","filter","then","result","all","length","operations","deviceTypeFilter","join","match","Promise","resolve"],"mappings":"ozBAQMA,wB,YAEJ,kCAAYC,CAAZ,CAAwBC,CAAxB,CAA+B,gDAC7B,KAAKD,UAAL,CAAkBA,CADW,CAE7B,KAAKC,KAAL,CAAaA,CACd,C,gFAEKC,C,CAAW,CAEf,QAASC,EAAT,CAA2BC,CAA3B,CAAkC,CAChC,MAAOA,GAAMC,GAAN,CAAU,SAACC,CAAD,CAAU,CACzB,GAAMC,GAA6B,IAAhB,IAAKC,OAAN,CAA+C,EAA/C,KAA6BF,EAAKE,OAAlC,IAAlB,CACA,MAAO,CACLC,KAASH,EAAKI,IAAd,KAAsBH,CADjB,CAELI,MAAOL,EAAKM,EAFP,CAIR,CANM,CAOR,CAED,GAAMC,GAAaX,EAAUY,KAAV,CAAgB,GAAhB,EAAqBC,MAArB,CAA4B,kBAA2B,EAAd,IAAb,CAA5B,CAAnB,CAEA,MAAO,MAAKf,UAAL,CACJI,KADI,GAEFY,IAFE,CAEG,SAACZ,CAAD,CAAW,CACf,GAAIa,GAASb,EAAMc,GAAnB,CAQA,MALED,EAKF,CAN0B,CAAtB,KAAWE,MAMf,CALWf,EAAMgB,UAAN,CAAiBC,gBAAjB,CAAkCJ,CAAlC,CAA0CJ,EAAW,CAAX,CAA1C,CAKX,CAHWT,EAAMgB,UAAN,CAAiBC,gBAAjB,CAAkCJ,CAAlC,CAA0CJ,EAAWS,IAAX,CAAgB,GAAhB,CAA1C,CAGX,CAAOnB,EAAkBc,CAAlB,CACR,CAZE,CAaR,C,yCAES,CACR,GAAMb,GAAQ,KAAKH,KAAL,CAAWsB,KAAX,CAAiB,oCAAjB,CAAd,CADQ,MAGJnB,EAHI,CAIC,KAAKA,KAAL,CAAWA,EAAM,CAAN,CAAX,CAJD,CAMDoB,QAAQC,OAAR,IACR,C,oEAKD1B,wB","file":"metricFindQuery.js","sourcesContent":["/**\n * @license\n * Copyright AdRem Software. All Rights Reserved.\n *\n * Use of this source code is governed by an Apache License, Version 2.0 that can be\n * found in the LICENSE file.\n */\n\nclass NetCrunchMetricFindQuery {\n\n  constructor(datasource, query) {\n    this.datasource = datasource;\n    this.query = query;\n  }\n\n  nodes(selectors) {\n\n    function createQueryResult(nodes) {\n      return nodes.map((node) => {\n        const ipAddress = (node.address != null) ? `(${node.address})` : '';\n        return {\n          text: `${node.name} ${ipAddress}`,\n          value: node.id\n        };\n      });\n    }\n\n    const parameters = selectors.split('.').filter(parameter => parameter !== '');\n\n    return this.datasource\n      .nodes()\n        .then((nodes) => {\n          let result = nodes.all;\n\n          if (parameters.length === 1) {\n            result = nodes.operations.deviceTypeFilter(result, parameters[0]);\n          } else {\n            result = nodes.operations.deviceTypeFilter(result, parameters.join('.'));\n          }\n\n          return createQueryResult(result);\n        });\n  }\n\n  process() {\n    const nodes = this.query.match(/^[nN][oO][dD][eE][sS]((\\.[\\w]+)*)$/);\n\n    if (nodes) {\n      return this.nodes(nodes[1]);\n    }\n    return Promise.resolve([]);\n  }\n\n}\n\nexport {\n  NetCrunchMetricFindQuery\n};\n"]}